# Configuration Docker Compose pour l'environnement de production
# Inclut tous les services nécessaires avec optimisations de sécurité et performance

version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: femmes_politique_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: femmes_politique_db
      POSTGRES_USER: ${DB_USER:-femmes_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-femmes_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # Redis pour cache et Celery
  redis:
    image: redis:7-alpine
    container_name: femmes_politique_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
    container_name: femmes_politique_backend
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=plateforme_femmes_backend.settings.production
      - DATABASE_URL=postgres://${DB_USER:-femmes_user}:${DB_PASSWORD}@postgres:5432/femmes_politique_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn plateforme_femmes_backend.wsgi:application 
          --bind 0.0.0.0:8000 
          --workers 4 
          --threads 2 
          --timeout 60 
          --access-logfile /app/logs/gunicorn-access.log 
          --error-logfile /app/logs/gunicorn-error.log
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network
      - frontend-network

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: femmes_politique_celery_worker
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=plateforme_femmes_backend.settings.production
      - DATABASE_URL=postgres://${DB_USER:-femmes_user}:${DB_PASSWORD}@postgres:5432/femmes_politique_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - ./backend:/app
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      - backend
      - redis
      - postgres
    command: celery -A plateforme_femmes_backend worker -l info -Q default,email,media,notifications,reports
    healthcheck:
      test: ["CMD", "celery", "-A", "plateforme_femmes_backend", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network

  # Celery Beat (tâches périodiques)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: femmes_politique_celery_beat
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=plateforme_femmes_backend.settings.production
      - DATABASE_URL=postgres://${DB_USER:-femmes_user}:${DB_PASSWORD}@postgres:5432/femmes_politique_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - ./backend:/app
      - logs_volume:/app/logs
    depends_on:
      - backend
      - redis
    command: celery -A plateforme_femmes_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - backend-network

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=18
        - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
    container_name: femmes_politique_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
    volumes:
      - ./frontend/build:/usr/share/nginx/html
      - ./nginx/frontend.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - frontend-network

  # Nginx comme reverse proxy
  nginx:
    image: nginx:alpine
    container_name: femmes_politique_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - logs_volume:/var/log/nginx
    depends_on:
      - backend
      - frontend
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - frontend-network
      - backend-network

  # Certbot pour SSL Let's Encrypt
  certbot:
    image: certbot/certbot
    container_name: femmes_politique_certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - frontend-network

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: femmes_politique_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
      - backend-network

  # Grafana pour visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: femmes_politique_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring-network

  # Backup automatique
  backup:
    image: postgres:15-alpine
    container_name: femmes_politique_backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    entrypoint: ["/bin/sh", "-c"]
    command: ["chmod +x /backup.sh && crond -f -d 8"]
    depends_on:
      - postgres
    networks:
      - backend-network

# Volumes pour persistance des données
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Réseaux pour isolation
networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge
  monitoring-network:
    driver: bridge