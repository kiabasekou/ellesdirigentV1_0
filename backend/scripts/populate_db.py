#!/usr/bin/env python
"""
Script de population de la base de donn√©es avec des donn√©es de test r√©alistes
Cr√©e des utilisateurs, √©v√©nements, forums, ressources, etc.
"""
import os
import sys
import django
import random
from datetime import datetime, timedelta
from django.utils import timezone
from django.core.files.base import ContentFile

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'plateforme_femmes_backend.settings')
django.setup()

from users.models import Participante, UserProfile


# Donn√©es de test r√©alistes pour le Gabon
PRENOMS_FEMININS = [
    'Aline', 'Betty', 'C√©cile', 'Diane', 'Estelle', 'Fabienne', 'Georgette', 
    'Henriette', 'Isabelle', 'Jos√©phine', 'Karine', 'L√©onie', 'Marie', 
    'Nathalie', 'Odette', 'Pauline', 'Rosalie', 'Sylvie', 'Th√©r√®se', 'Ursule',
    'Victoire', 'Yvette', 'Z√©lie', 'Adrienne', 'B√©atrice', 'Christine',
    'Delphine', '√âmilie', 'Florence', 'Gis√®le'
]

NOMS_FAMILLE = [
    'Mengue', 'Nzoghe', 'Obame', 'Moussounda', 'Koumba', 'Ndong', 'Ella',
    'Mba', 'Nze', 'Ondo', 'Mintsa', 'Essono', 'Nguema', 'Mboumba', 'Moussavou',
    'Bouanga', 'Mbadinga', 'Nzengue', 'Ovono', 'Bivigou', 'Mihindou', 'Ekomy',
    'Moukagni', 'Nziengui', 'Ogoula', 'Mabika', 'Meyo', 'Minko', 'Mouity', 'Nyangui'
]

VILLES = {
    'estuaire': ['Libreville', 'Owendo', 'Ntoum', 'Cocobeach', 'Cap Est√©rias'],
    'haut_ogooue': ['Franceville', 'Moanda', 'Mounana', 'Okondja'],
    'moyen_ogooue': ['Lambar√©n√©', 'Ndjol√©', 'Fougamou'],
    'ngounie': ['Mouila', 'Ndend√©', 'Mbigou', 'Mimongo'],
    'nyanga': ['Tchibanga', 'Mayumba', 'Mabanda'],
    'ogooue_ivindo': ['Makokou', 'Ovan', 'Boou√©'],
    'ogooue_lolo': ['Koulamoutou', 'Lastoursville', 'Iboundji'],
    'ogooue_maritime': ['Port-Gentil', 'Ombou√©', 'Gamba'],
    'woleu_ntem': ['Oyem', 'Bitam', 'Minvoul', 'Mitzic']
}

ORGANISATIONS = [
    "Association des Femmes Entrepreneures du Gabon",
    "R√©seau des Femmes Leaders",
    "ONG Femmes et D√©veloppement",
    "Association pour la Promotion de la Femme Gabonaise",
    "Collectif des Femmes pour la Paix",
    "Mouvement des Femmes Rurales",
    "Association des Femmes Juristes",
    "R√©seau des Femmes en Politique",
    "ONG √âducation et Autonomisation",
    "Association des Femmes Commer√ßantes"
]

POSITIONS = [
    "Pr√©sidente d'association",
    "Coordinatrice de projet",
    "Conseill√®re municipale",
    "Directrice d'ONG",
    "Responsable de programme",
    "Charg√©e de mission",
    "Secr√©taire g√©n√©rale",
    "Tr√©sori√®re",
    "Responsable communication",
    "Formatrice"
]

COMPETENCES = [
    "Leadership", "Gestion de projet", "Communication", "N√©gociation",
    "Plaidoyer", "Formation", "M√©diation", "Gestion financi√®re",
    "D√©veloppement communautaire", "Mobilisation sociale", "R√©daction",
    "Organisation d'√©v√©nements", "R√©seautage", "Analyse politique",
    "Gestion d'√©quipe", "Fundraising", "Communication digitale",
    "Relations publiques", "Planification strat√©gique", "R√©solution de conflits"
]

INTERETS_POLITIQUES = [
    "Gouvernance locale", "Droits des femmes", "√âducation",
    "Sant√© publique", "√âconomie et emploi", "Environnement",
    "Justice sociale", "D√©veloppement rural", "Jeunesse",
    "Culture et patrimoine", "S√©curit√© alimentaire", "Transport",
    "Logement social", "Entrepreneuriat f√©minin", "Protection de l'enfance"
]


def create_superuser():
    """Cr√©e un superutilisateur admin"""
    print("\nüë§ Cr√©ation du superutilisateur...")
    
    admin_user = None
    if Participante.objects.filter(username='admin').exists():
        print("    ‚ö†Ô∏è  Superutilisateur 'admin' existe d√©j√†")
        admin_user = Participante.objects.get(username='admin')
    else:
        admin_user = Participante.objects.create_superuser(
            username='admin',
            email='admin@femmes-politique.ga',
            password='Admin123!@#',
            first_name='Admin',
            last_name='Syst√®me',
            nip='ADM000000001',
            region='estuaire',
            ville='Libreville',
            statut_validation='validee'
        )
        print("    ‚úÖ Superutilisateur cr√©√©:")
        print("        - Username: admin")
        print("        - Password: Admin123!@#")
    
    # Cr√©er le profil s'il n'existe pas d√©j√†
    if not UserProfile.objects.filter(user=admin_user).exists():
        UserProfile.objects.create(
            user=admin_user,
            bio="Administrateur de la plateforme Femmes en Politique",
            current_position="Administrateur Syst√®me"
        )
        print("    ‚úÖ Profil superutilisateur cr√©√©/mis √† jour.")
    else:
        print("    ‚ö†Ô∏è  Profil superutilisateur 'admin' existe d√©j√†")

    return admin_user

def create_test_users(count=30):
    """Cr√©e des utilisatrices de test avec des profils r√©alistes"""
    print(f"\nüë• Cr√©ation de {count} utilisatrices de test...")
    
    users = []
    
    for i in range(count):
        # G√©n√©rer des donn√©es al√©atoires
        prenom = random.choice(PRENOMS_FEMININS)
        nom = random.choice(NOMS_FAMILLE)
        username = f"{prenom.lower()}.{nom.lower()}{random.randint(1, 99)}"
        email = f"{username}@example.com"
        
        # S√©lectionner r√©gion et ville
        region = random.choice(list(VILLES.keys()))
        ville = random.choice(VILLES[region])
        
        # Date de naissance (25-65 ans)
        age = random.randint(25, 65)
        date_naissance = datetime.now().date() - timedelta(days=age*365)
        
        # Exp√©rience
        experience = random.choice(['aucune', 'locale', 'regionale', 'nationale'])
        
        # Statut de validation
        statut = random.choices(
            ['validee', 'en_attente', 'rejetee'],
            weights=[70, 20, 10]  # 70% valid√©es, 20% en attente, 10% rejet√©es
        )[0]
        
        # Cr√©er l'utilisatrice
        try:
            user = Participante.objects.create_user(
                username=username,
                email=email,
                password='Test123!@#',
                first_name=prenom,
                last_name=nom,
                nip=f"GAB{str(random.randint(100000000, 999999999))}",
                phone=f"+241{random.randint(60000000, 77999999)}",
                date_of_birth=date_naissance,
                region=region,
                ville=ville,
                experience=experience,
                statut_validation=statut,
                is_mentor=random.random() < 0.3,  # 30% sont mentors
                email_notifications=random.random() < 0.8  # 80% acceptent les notifications
            )
            
            # Ajouter un document justificatif fictif
            user.document_justificatif.save(
                f'nip_{user.username}.pdf',
                ContentFile(b'Document NIP fictif pour test')
            )
            
            if statut == 'validee':
                user.validated_at = timezone.now() - timedelta(days=random.randint(1, 30))
            elif statut == 'rejetee':
                user.motif_rejet = "Document justificatif non conforme"
            
            user.save()
            
            # Cr√©er le profil √©tendu
            profile = UserProfile.objects.create(
                user=user,
                bio=f"Engag√©e dans le d√©veloppement de ma communaut√© √† {ville}. "
                    f"Passionn√©e par l'autonomisation des femmes et le progr√®s social.",
                education_level=random.choice(['licence', 'master', 'secondaire', 'doctorat']),
                current_position=random.choice(POSITIONS),
                organization=random.choice(ORGANISATIONS),
                skills=random.sample(COMPETENCES, random.randint(3, 8)),
                languages=['Fran√ßais'] + random.sample(['Fang', 'My√®n√®', 'Nzebi', 'Obamba', 'T√©k√©', 'Anglais'], random.randint(1, 3)),
                political_interests=random.sample(INTERETS_POLITIQUES, random.randint(2, 5)),
                career_goals=f"Aspire √† jouer un r√¥le actif dans la gouvernance locale de {region.title()} "
                            f"et √† promouvoir les droits des femmes.",
                website=f"https://www.{username.replace('.', '-')}.ga" if random.random() < 0.3 else "",
                linkedin=f"https://linkedin.com/in/{username}" if random.random() < 0.5 else "",
                twitter=f"@{username.replace('.', '_')}" if random.random() < 0.4 else "",
                is_public=random.random() < 0.8,
                show_contact_info=random.random() < 0.5
            )
            
            if user.is_mentor:
                profile.mentorship_areas = random.sample(
                    ["Leadership politique", "Communication publique", "Gestion de campagne",
                     "D√©veloppement personnel", "Strat√©gie √©lectorale", "Mobilisation communautaire"],
                    random.randint(1, 3)
                )
                profile.save()
            
            users.append(user)
            print(f"   ‚úÖ Cr√©√©: {prenom} {nom} ({ville}, {region}) - {statut}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur cr√©ation {username}: {str(e)}")
    
    print(f"\n‚úÖ {len(users)} utilisatrices cr√©√©es avec succ√®s!")
    return users


def create_sample_events():
    """Cr√©e des √©v√©nements de test"""
    print("\nüìÖ Cr√©ation d'√©v√©nements de test...")
    
    # Importer les mod√®les n√©cessaires (√† cr√©er dans votre app events)
    # from events.models import Event
    
    events_data = [
        {
            "title": "Formation Leadership F√©minin en Politique",
            "description": "Formation intensive de 3 jours sur le leadership politique pour les femmes",
            "location": "Centre de Formation du Minist√®re, Libreville",
            "date": timezone.now() + timedelta(days=7),
            "max_participants": 50
        },
        {
            "title": "Atelier: Communication Politique Efficace",
            "description": "Techniques de communication pour les candidates aux √©lections",
            "location": "H√¥tel Radisson, Port-Gentil",
            "date": timezone.now() + timedelta(days=14),
            "max_participants": 30
        },
        {
            "title": "Conf√©rence: Femmes et Gouvernance Locale",
            "description": "Table ronde sur la participation des femmes dans la gouvernance locale",
            "location": "Universit√© Omar Bongo, Libreville",
            "date": timezone.now() + timedelta(days=21),
            "max_participants": 100
        },
        {
            "title": "S√©minaire: Gestion de Campagne √âlectorale",
            "description": "Strat√©gies et techniques pour mener une campagne √©lectorale r√©ussie",
            "location": "Centre Culturel Fran√ßais, Franceville",
            "date": timezone.now() + timedelta(days=30),
            "max_participants": 40
        },
        {
            "title": "Forum: Entrepreneuriat F√©minin et Politique",
            "description": "Comment concilier entrepreneuriat et engagement politique",
            "location": "En ligne via Zoom",
            "date": timezone.now() + timedelta(days=10),
            "max_participants": 200
        }
    ]
    
    # TODO: Cr√©er les √©v√©nements une fois le mod√®le Event disponible
    print("   ‚ö†Ô∏è  Module events non encore impl√©ment√©")
    

def create_sample_forums():
    """Cr√©e des discussions de forum de test"""
    print("\nüí¨ Cr√©ation de discussions de forum...")
    
    # Importer les mod√®les n√©cessaires (√† cr√©er dans votre app forums)
    # from forums.models import ForumCategory, ForumTopic, ForumPost
    
    categories = [
        {
            "name": "Gouvernance et Institutions",
            "description": "Discussions sur les r√©formes institutionnelles et la gouvernance"
        },
        {
            "name": "D√©veloppement Local",
            "description": "√âchanges sur le d√©veloppement des communaut√©s locales"
        },
        {
            "name": "Droits des Femmes",
            "description": "D√©bats sur l'√©galit√© des genres et les droits des femmes"
        },
        {
            "name": "√âducation et Formation",
            "description": "Partage d'exp√©riences sur l'√©ducation et la formation"
        }
    ]
    
    # TODO: Cr√©er les cat√©gories et discussions une fois les mod√®les disponibles
    print("   ‚ö†Ô∏è  Module forums non encore impl√©ment√©")


def create_sample_resources():
    """Cr√©e des ressources documentaires de test"""
    print("\nüìö Cr√©ation de ressources documentaires...")
    
    # Importer les mod√®les n√©cessaires (√† cr√©er dans votre app resources)
    # from resources.models import Resource
    
    resources_data = [
        {
            "title": "Guide Pratique: Se Pr√©senter aux √âlections Locales",
            "description": "Guide complet pour les candidates aux √©lections municipales",
            "type": "guide",
            "file_type": "pdf"
        },
        {
            "title": "Manuel de Communication Politique",
            "description": "Techniques et strat√©gies de communication pour les femmes en politique",
            "type": "manuel",
            "file_type": "pdf"
        },
        {
            "title": "√âtude: Participation des Femmes en Politique au Gabon",
            "description": "Analyse de la repr√©sentation f√©minine dans les institutions gabonaises",
            "type": "etude",
            "file_type": "pdf"
        },
        {
            "title": "Kit de Formation: Leadership F√©minin",
            "description": "Supports de formation pour d√©velopper le leadership",
            "type": "formation",
            "file_type": "zip"
        },
        {
            "title": "Vid√©o: T√©moignages de Femmes √âlues",
            "description": "Interviews de femmes occupant des postes √©lectifs",
            "type": "video",
            "file_type": "mp4"
        }
    ]
    
    # TODO: Cr√©er les ressources une fois le mod√®le disponible
    print("   ‚ö†Ô∏è  Module resources non encore impl√©ment√©")


def display_summary():
    """Affiche un r√©sum√© des donn√©es cr√©√©es"""
    print("\nüìä R√âSUM√â DES DONN√âES CR√â√âES:")
    print("=" * 50)
    
    total_users = Participante.objects.count()
    validated_users = Participante.objects.filter(statut_validation='validee').count()
    pending_users = Participante.objects.filter(statut_validation='en_attente').count()
    rejected_users = Participante.objects.filter(statut_validation='rejetee').count()
    mentors = Participante.objects.filter(is_mentor=True).count()
    
    print(f"üë• Utilisatrices:")
    print(f"   - Total: {total_users}")
    print(f"   - Valid√©es: {validated_users}")
    print(f"   - En attente: {pending_users}")
    print(f"   - Rejet√©es: {rejected_users}")
    print(f"   - Mentors: {mentors}")
    
    print(f"\nüåç R√©partition par r√©gion:")
    for region in VILLES.keys():
        count = Participante.objects.filter(region=region).count()
        print(f"   - {region.title()}: {count}")
    
    print(f"\nüìà R√©partition par exp√©rience:")
    for exp in ['aucune', 'locale', 'regionale', 'nationale']:
        count = Participante.objects.filter(experience=exp).count()
        print(f"   - {exp.title()}: {count}")


def main():
    """Fonction principale"""
    print("üöÄ POPULATION DE LA BASE DE DONN√âES")
    print("=" * 50)
    
    try:
        # Cr√©er le superuser
        admin = create_superuser()
        
        # Cr√©er les utilisatrices de test
        users = create_test_users(30)
        
        # Cr√©er les √©v√©nements
        create_sample_events()
        
        # Cr√©er les forums
        create_sample_forums()
        
        # Cr√©er les ressources
        create_sample_resources()
        
        # Afficher le r√©sum√©
        display_summary()
        
        print("\n‚úÖ Population de la base de donn√©es termin√©e avec succ√®s!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la population: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()