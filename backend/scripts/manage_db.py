#!/usr/bin/env python
"""
Script de gestion complet de la base de donn√©es
Permet de r√©initialiser, sauvegarder, restaurer et g√©rer les donn√©es
"""
import os
import sys
import django
import json
import shutil
from datetime import datetime
from django.core import serializers
from django.core.management import call_command
from django.conf import settings # Pour acc√©der √† la configuration des applications et au chemin de la base de donn√©es

# Ajouter le r√©pertoire parent au path pour que Django trouve les applications
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'plateforme_femmes_backend.settings')
django.setup()

# Importations des mod√®les apr√®s django.setup()
# C'est une bonne pratique pour √©viter les erreurs d'importation circulaire ou les probl√®mes de configuration
from users.models import Participante
# Ajoutez ici d'autres mod√®les si vous souhaitez les s√©rialiser/d√©s√©rialiser sp√©cifiquement

class DatabaseManager:
    """Gestionnaire de base de donn√©es avec diverses op√©rations"""

    def __init__(self):
        self.backup_dir = 'backups'
        os.makedirs(self.backup_dir, exist_ok=True)
        # Obtenez le chemin de la base de donn√©es √† partir des param√®tres Django
        self.db_path = settings.DATABASES['default']['NAME']
        # Assurez-vous que le chemin est absolu si n√©cessaire
        if not os.path.isabs(self.db_path):
            self.db_path = os.path.join(settings.BASE_DIR, self.db_path)

    def _get_all_app_models(self):
        """R√©cup√®re tous les mod√®les enregistr√©s dans Django."""
        from django.apps import apps
        all_models = []
        for app_config in apps.get_app_configs():
            for model in app_config.get_models():
                # Exclure les mod√®les qui ne devraient pas √™tre s√©rialis√©s/d√©s√©rialis√©s directement
                # Par exemple, les mod√®les de permissions ou de sessions si vous les r√©initialisez avec migrate
                # if model._meta.app_label != 'auth' and model._meta.app_label != 'admin':
                all_models.append(model)
        return all_models

    def backup_database(self, backup_name=None, include_media=True, include_json_data=True):
        """Sauvegarde compl√®te de la base de donn√©es et des m√©dias/donn√©es JSON."""
        if not backup_name:
            backup_name = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

        backup_path = os.path.join(self.backup_dir, backup_name)
        os.makedirs(backup_path, exist_ok=True)

        print(f"\nüíæ Sauvegarde de la base de donn√©es dans: {backup_path}")

        try:
            # Sauvegarde de la base de donn√©es SQLite
            if os.path.exists(self.db_path):
                shutil.copy2(self.db_path, os.path.join(backup_path, os.path.basename(self.db_path)))
                print(f"   ‚úÖ Base de donn√©es '{os.path.basename(self.db_path)}' sauvegard√©e")
            else:
                print(f"   ‚ö†Ô∏è Le fichier de base de donn√©es '{os.path.basename(self.db_path)}' n'existe pas, il ne sera pas sauvegard√©.")

            # Sauvegarde des m√©dias
            if include_media and os.path.exists(settings.MEDIA_ROOT):
                media_backup = os.path.join(backup_path, 'media')
                if os.path.exists(media_backup):
                    shutil.rmtree(media_backup) # Supprimer l'ancienne copie si elle existe
                shutil.copytree(settings.MEDIA_ROOT, media_backup)
                print("   ‚úÖ Fichiers m√©dia sauvegard√©s")
            elif include_media:
                print(f"   ‚ö†Ô∏è Le dossier m√©dia '{settings.MEDIA_ROOT}' n'existe pas, il ne sera pas sauvegard√©.")

            # Export des donn√©es de tous les mod√®les en JSON
            if include_json_data:
                json_data_file = os.path.join(backup_path, 'all_data.json')
                try:
                    # Utilisez call_command pour dumpdata, c'est plus robuste
                    with open(json_data_file, 'w', encoding='utf-8') as f:
                        call_command('dumpdata', indent=2, stdout=f)
                    print("   ‚úÖ Toutes les donn√©es des applications export√©es en JSON")
                except Exception as e:
                    print(f"   ‚ùå Erreur lors de l'exportation des donn√©es JSON: {str(e)}")

            # Cr√©er un fichier info
            info = {
                'date': datetime.now().isoformat(),
                'django_version': django.VERSION,
                'db_file': os.path.basename(self.db_path),
                'user_count': Participante.objects.count(),
                'validated_count': Participante.objects.filter(statut_validation='validee').count()
            }

            with open(os.path.join(backup_path, 'info.json'), 'w') as f:
                json.dump(info, f, indent=2)

            print(f"\n‚úÖ Sauvegarde compl√®te r√©alis√©e: {backup_name}")
            return backup_path

        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {str(e)}")
            return None

    def restore_database(self, backup_name):
        """Restaure une sauvegarde de la base de donn√©es et des m√©dias."""
        backup_path = os.path.join(self.backup_dir, backup_name)

        if not os.path.exists(backup_path):
            print(f"‚ùå Sauvegarde introuvable: {backup_path}")
            return False

        print(f"\nüîÑ Restauration depuis: {backup_path}")

        confirm = input("\n‚ö†Ô∏è Cette action √©crasera les donn√©es actuelles de la base et les m√©dias! Continuer? (yes/no): ").lower()
        if confirm != 'yes':
            print("‚ùå Restauration annul√©e.")
            return False

        try:
            # Restaurer la base de donn√©es SQLite
            db_backup_file = os.path.join(backup_path, os.path.basename(self.db_path))
            if os.path.exists(db_backup_file):
                # Assurez-vous que le fichier db.sqlite3 est ferm√© avant de le remplacer
                # Cela peut n√©cessiter de stopper le serveur Django ou de d√©connecter les connexions
                print(f"   Info: Fermeture des connexions √† la base de donn√©es avant restauration...")
                from django.db import connections
                connections['default'].close() # Ferme la connexion par d√©faut

                if os.path.exists(self.db_path):
                    os.remove(self.db_path) # Supprime l'ancienne DB
                shutil.copy2(db_backup_file, self.db_path)
                print(f"   ‚úÖ Base de donn√©es '{os.path.basename(self.db_path)}' restaur√©e")
                # R√©ouvrir la connexion apr√®s restauration
                connections['default'].cursor()
            else:
                print(f"   ‚ö†Ô∏è Fichier de base de donn√©es '{os.path.basename(self.db_path)}' introuvable dans la sauvegarde. Base de donn√©es non restaur√©e.")


            # Restaurer les m√©dias
            media_backup = os.path.join(backup_path, 'media')
            if os.path.exists(media_backup):
                if os.path.exists(settings.MEDIA_ROOT):
                    shutil.rmtree(settings.MEDIA_ROOT) # Supprime le dossier m√©dia actuel
                shutil.copytree(media_backup, settings.MEDIA_ROOT)
                print("   ‚úÖ Fichiers m√©dia restaur√©s")
            else:
                print("   ‚ö†Ô∏è Dossier m√©dia introuvable dans la sauvegarde. Fichiers m√©dia non restaur√©s.")

            # Recharger les donn√©es JSON si un fichier est pr√©sent (alternative √† la restauration directe de la DB)
            json_data_file = os.path.join(backup_path, 'all_data.json')
            if os.path.exists(json_data_file):
                print("   Info: Tenter de recharger les donn√©es JSON. Note: Cela peut √™tre utile si la restauration du fichier DB √©choue ou pour migrer des donn√©es.")
                try:
                    # Optionnel: R√©initialiser la DB avant de charger les donn√©es JSON si on ne restaure pas le fichier db.sqlite3
                    # self.reset_database(confirm=False) # Si vous voulez toujours un reset avant le loaddata

                    # Utiliser loaddata pour charger les donn√©es
                    call_command('loaddata', json_data_file)
                    print("   ‚úÖ Donn√©es JSON recharg√©es (loaddata)")
                except Exception as e:
                    print(f"   ‚ùå Erreur lors du rechargement des donn√©es JSON: {str(e)}")


            print("\n‚úÖ Restauration compl√®te!")
            return True

        except Exception as e:
            print(f"‚ùå Erreur lors de la restauration: {str(e)}")
            return False

    def list_backups(self):
        """Liste toutes les sauvegardes disponibles avec des informations."""
        print("\nüìÇ Sauvegardes disponibles:")

        backups = []
        for backup_folder in os.listdir(self.backup_dir):
            backup_path = os.path.join(self.backup_dir, backup_folder)
            if os.path.isdir(backup_path):
                info_file = os.path.join(backup_path, 'info.json')
                info = {}
                if os.path.exists(info_file):
                    try:
                        with open(info_file, 'r', encoding='utf-8') as f:
                            info = json.load(f)
                    except json.JSONDecodeError:
                        print(f"   ‚ö†Ô∏è Fichier info.json corrompu dans {backup_folder}")
                        info = {} # R√©initialiser info en cas d'erreur
                
                backups.append({
                    'name': backup_folder,
                    'date': info.get('date', 'N/A'),
                    'users': info.get('user_count', 'N/A'),
                    'validated': info.get('validated_count', 'N/A')
                })

        if not backups:
            print("   Aucune sauvegarde trouv√©e.")
            return

        # Trier par date, du plus r√©cent au plus ancien
        try:
            backups.sort(key=lambda x: datetime.fromisoformat(x['date']) if x['date'] != 'N/A' else datetime.min, reverse=True)
        except ValueError:
            print("   ‚ö†Ô∏è Erreur de format de date dans une ou plusieurs sauvegardes, tri non garanti.")
            backups.sort(key=lambda x: x['name'], reverse=True) # Fallback sur le nom

        for backup in backups:
            print(f"\n   üìÅ {backup['name']}")
            print(f"     Date: {backup['date']}")
            print(f"     Utilisateurs: {backup['users']}")
            print(f"     Valid√©s: {backup['validated']}")

    def delete_backup(self, backup_name):
        """Supprime une sauvegarde sp√©cifique."""
        backup_path = os.path.join(self.backup_dir, backup_name)

        if not os.path.exists(backup_path):
            print(f"‚ùå Sauvegarde '{backup_name}' introuvable.")
            return False

        confirm = input(f"‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer la sauvegarde '{backup_name}' et tous ses contenus? (yes/no): ").lower()
        if confirm != 'yes':
            print("‚ùå Suppression annul√©e.")
            return False

        try:
            shutil.rmtree(backup_path)
            print(f"‚úÖ Sauvegarde '{backup_name}' supprim√©e avec succ√®s.")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la suppression de la sauvegarde '{backup_name}': {str(e)}")
            return False

    def reset_database(self, confirm=True):
        """
        R√©initialise la base de donn√©es en supprimant le fichier DB, les migrations et en refaisant les migrations.
        Optionnellement, peut recr√©er le superutilisateur par d√©faut.
        """
        print("\nüí• R√©initialisation compl√®te de la base de donn√©es...")

        if confirm:
            confirmation = input("‚ö†Ô∏è Cette action va SUPPRIMER toutes les donn√©es et la structure de la base de donn√©es. Continuer? (yes/no): ").lower()
            if confirmation != 'yes':
                print("‚ùå R√©initialisation annul√©e.")
                return False

        try:
            # 1. Supprimer le fichier de la base de donn√©es (si SQLite)
            if os.path.exists(self.db_path):
                from django.db import connections
                connections['default'].close() # Ferme la connexion avant de supprimer le fichier
                os.remove(self.db_path)
                print(f"   ‚úÖ Fichier de base de donn√©es '{os.path.basename(self.db_path)}' supprim√©.")
            else:
                print(f"   ‚ö†Ô∏è Fichier de base de donn√©es '{os.path.basename(self.db_path)}' non trouv√©, ignorer la suppression.")

            # 2. Supprimer les fichiers de migration pour chaque application
            base_dir = settings.BASE_DIR
            for app_config in django.apps.apps.get_app_configs():
                migrations_dir = os.path.join(app_config.path, 'migrations')
                if os.path.isdir(migrations_dir):
                    for filename in os.listdir(migrations_dir):
                        if filename != '__init__.py' and filename.endswith('.py'):
                            os.remove(os.path.join(migrations_dir, filename))
                            print(f"   üóëÔ∏è Migration supprim√©e: {os.path.join(app_config.label, 'migrations', filename)}")
            print("   ‚úÖ Tous les fichiers de migration des applications supprim√©s.")


            # 3. Refaire les migrations
            print("   ‚öôÔ∏è Cr√©ation de nouvelles migrations...")
            call_command('makemigrations') # Ex√©cute makemigrations pour toutes les apps
            print("   ‚öôÔ∏è Application des migrations...")
            call_command('migrate')
            print("   ‚úÖ Base de donn√©es r√©initialis√©e et migrations appliqu√©es.")

            return True

        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©initialisation: {str(e)}")
            return False

    def truncate_app_data(self, app_name, confirm=True):
        """
        Vide les donn√©es de tous les mod√®les d'une application sp√©cifique sans supprimer la table.
        Garde la structure de la base de donn√©es.
        """
        print(f"\nüóëÔ∏è Vidage des donn√©es de l'application '{app_name}'...")

        try:
            app_config = django.apps.apps.get_app_config(app_name)
        except LookupError:
            print(f"‚ùå Application '{app_name}' introuvable.")
            return False

        models_to_truncate = app_config.get_models()
        if not models_to_truncate:
            print(f"   Aucun mod√®le trouv√© pour l'application '{app_name}'.")
            return True

        if confirm:
            model_names = [model.__name__ for model in models_to_truncate]
            confirmation = input(
                f"‚ö†Ô∏è Cette action va supprimer TOUTES les donn√©es des mod√®les suivants dans '{app_name}': "
                f"{', '.join(model_names)}. Continuer? (yes/no): "
            ).lower()
            if confirmation != 'yes':
                print("‚ùå Vidage annul√©.")
                return False

        try:
            from django.db import connection, transaction
            with transaction.atomic():
                for model in models_to_truncate:
                    # Supprimer les objets un par un peut d√©clencher des signaux ou des nettoyages personnalis√©s
                    # C'est souvent plus s√ªr que TRUNCATE TABLE sur certains DBs (PostgreSQL SEQUENCE RESET)
                    # Si la performance est critique pour de tr√®s grandes tables, consid√©rez Model.objects.all()._raw_delete(self.db_manager.using)
                    # Mais assurez-vous de g√©rer les FKs et les s√©quences.
                    model.objects.all().delete()
                    print(f"   üóëÔ∏è Donn√©es du mod√®le '{model.__name__}' supprim√©es.")
            print(f"‚úÖ Donn√©es de l'application '{app_name}' vid√©es avec succ√®s.")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors du vidage des donn√©es de l'application '{app_name}': {str(e)}")
            return False


def print_help():
    """Affiche le message d'aide."""
    print("\nUtilisation: python database_manager.py [commande] [options]")
    print("\nCommandes disponibles:")
    print("  backup [nom_sauvegarde] [--no-media] [--no-json] - Sauvegarde la base de donn√©es et les m√©dias.")
    print("    Si 'nom_sauvegarde' est omis, un nom bas√© sur la date/heure sera utilis√©.")
    print("    --no-media: Ne pas inclure les fichiers m√©dias dans la sauvegarde.")
    print("    --no-json: Ne pas inclure l'export JSON des donn√©es dans la sauvegarde.")
    print("  restore <nom_sauvegarde> - Restaure une sauvegarde sp√©cifique.")
    print("  list                       - Liste toutes les sauvegardes disponibles.")
    print("  delete <nom_sauvegarde>    - Supprime une sauvegarde sp√©cifique.")
    print("  reset                      - R√©initialise compl√®tement la base de donn√©es (supprime tout).")
    print("  truncate <nom_app>         - Vide toutes les donn√©es des mod√®les d'une application sp√©cifi√©e.")
    print("  help                       - Affiche ce message d'aide.")
    print("\nExemples:")
    print("  python database_manager.py backup")
    print("  python database_manager.py backup my_project_snapshot --no-media")
    print("  python database_manager.py restore backup_20231026_143000")
    print("  python database_manager.py list")
    print("  python database_manager.py delete old_backup_2022")
    print("  python database_manager.py reset")
    print("  python database_manager.py truncate users")

def main():
    """Fonction principale pour l'ex√©cution du script."""
    manager = DatabaseManager()
    args = sys.argv[1:] # R√©cup√®re les arguments apr√®s le nom du script

    if not args:
        print_help()
        sys.exit(1)

    command = args[0]

    if command == 'backup':
        backup_name = None
        include_media = True
        include_json_data = True
        if len(args) > 1 and not args[1].startswith('--'):
            backup_name = args[1]
            remaining_args = args[2:]
        else:
            remaining_args = args[1:]
        
        if '--no-media' in remaining_args:
            include_media = False
            remaining_args.remove('--no-media')
        if '--no-json' in remaining_args:
            include_json_data = False
            remaining_args.remove('--no-json')
        
        if remaining_args: # Si des arguments inconnus restent
            print(f"‚ùå Arguments inconnus pour la commande 'backup': {remaining_args}")
            print_help()
            sys.exit(1)

        manager.backup_database(backup_name, include_media, include_json_data)

    elif command == 'restore':
        if len(args) < 2:
            print("‚ùå Commande 'restore' n√©cessite un nom de sauvegarde.")
            print_help()
            sys.exit(1)
        manager.restore_database(args[1])

    elif command == 'list':
        manager.list_backups()

    elif command == 'delete':
        if len(args) < 2:
            print("‚ùå Commande 'delete' n√©cessite un nom de sauvegarde.")
            print_help()
            sys.exit(1)
        manager.delete_backup(args[1])

    elif command == 'reset':
        if len(args) > 1:
            print("‚ùå Commande 'reset' ne prend pas d'arguments.")
            print_help()
            sys.exit(1)
        manager.reset_database()
    
    elif command == 'truncate':
        if len(args) < 2:
            print("‚ùå Commande 'truncate' n√©cessite le nom d'une application.")
            print_help()
            sys.exit(1)
        manager.truncate_app_data(args[1])

    elif command == 'help':
        print_help()

    else:
        print(f"‚ùå Commande inconnue: {command}")
        print_help()
        sys.exit(1)

if __name__ == '__main__':
    main()