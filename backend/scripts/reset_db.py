#!/usr/bin/env python
"""
Script de r√©initialisation compl√®te de la base de donn√©es
Supprime toutes les donn√©es et recr√©e les tables
"""
import os
import sys
import django
from django.core.management import call_command
from django.db import connection # This is the correct connection object to use

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'plateforme_femmes_backend.settings')
django.setup()


def reset_database():
    """R√©initialise compl√®tement la base de donn√©es"""
    print("üîÑ R√©initialisation de la base de donn√©es...")

    # Confirmation de s√©curit√©
    if input("\n‚ö†Ô∏è  ATTENTION: Cette action supprimera TOUTES les donn√©es! Continuer? (yes/no): ").lower() != 'yes':
        print("‚ùå Op√©ration annul√©e.")
        return

    try:
        # Fermer toutes les connexions
        connection.close()

        # Supprimer les migrations
        print("\nüìÅ Suppression des fichiers de migration...")
        # Start from the project root to find migration files correctly
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        for root, dirs, files in os.walk(project_root):
            if 'migrations' in dirs and not root.endswith('__pycache__'):
                migrations_dir = os.path.join(root, 'migrations')
                for file in os.listdir(migrations_dir):
                    if file.endswith('.py') and file != '__init__.py':
                        file_path = os.path.join(migrations_dir, file)
                        os.remove(file_path)
                        print(f"   ‚úì Supprim√©: {file_path}")

        # Supprimer la base de donn√©es SQLite (si utilis√©e)
        # Assuming db.sqlite3 is in the project root
        db_path = os.path.join(project_root, 'db.sqlite3')
        if os.path.exists(db_path):
            os.remove(db_path)
            print(f"\nüóëÔ∏è  Base de donn√©es SQLite supprim√©e: {db_path}")

        # Pour PostgreSQL, supprimer et recr√©er les tables
        # The 'connection' object from django.db is already available here.
        if 'postgresql' in connection.settings_dict['ENGINE']:
            print("\nüêò R√©initialisation PostgreSQL...")
            with connection.cursor() as cursor:
                # Obtenir toutes les tables
                cursor.execute("""
                    SELECT tablename FROM pg_tables
                    WHERE schemaname = 'public'
                """)
                tables = cursor.fetchall()

                # Supprimer toutes les tables avec CASCADE pour g√©rer les d√©pendances
                for table in tables:
                    cursor.execute(f'DROP TABLE IF EXISTS "{table[0]}" CASCADE') # Added quotes for case-sensitive table names
                    print(f"   ‚úì Table supprim√©e: {table[0]}")

        # Cr√©er les nouvelles migrations
        print("\nüî® Cr√©ation des nouvelles migrations...")
        apps = ['users', 'nip_verification', 'document_upload']

        for app in apps:
            try:
                call_command('makemigrations', app, verbosity=0)
                print(f"   ‚úì Migrations cr√©√©es pour: {app}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erreur pour {app}: {str(e)}")

        # Appliquer les migrations
        print("\nüöÄ Application des migrations...")
        call_command('migrate', verbosity=0)
        print("   ‚úì Toutes les migrations appliqu√©es")

        # Cr√©er les r√©pertoires media
        # Ensure media directories are created relative to the project root
        media_root = os.path.join(project_root, 'media')
        media_dirs = ['uploads', 'documents', 'avatars']
        for dir_name in media_dirs:
            dir_path = os.path.join(media_root, dir_name)
            os.makedirs(dir_path, exist_ok=True)
            print(f"   ‚úì R√©pertoire cr√©√©: {dir_path}")

        print("\n‚úÖ Base de donn√©es r√©initialis√©e avec succ√®s!")
        print("\nüí° Conseil: Ex√©cutez 'python scripts/populate_db.py' pour ajouter des donn√©es de test.")

    except Exception as e:
        print(f"\n‚ùå Erreur lors de la r√©initialisation: {str(e)}")
        sys.exit(1)


if __name__ == '__main__':
    reset_database()