# Generated by Django 4.2.7 on 2025-07-21 00:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import events.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("titre", models.CharField(max_length=200, verbose_name="Titre")),
                ("slug", models.SlugField(blank=True, max_length=250, unique=True)),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "description_courte",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Description courte"
                    ),
                ),
                (
                    "categorie",
                    models.CharField(
                        choices=[
                            ("formation", "Formation"),
                            ("conference", "Conférence"),
                            ("atelier", "Atelier"),
                            ("networking", "Réseautage"),
                            ("webinaire", "Webinaire"),
                            ("autre", "Autre"),
                        ],
                        default="formation",
                        max_length=20,
                    ),
                ),
                (
                    "tags",
                    models.JSONField(blank=True, default=list, verbose_name="Tags"),
                ),
                ("date_debut", models.DateTimeField(verbose_name="Date de début")),
                ("date_fin", models.DateTimeField(verbose_name="Date de fin")),
                (
                    "fuseau_horaire",
                    models.CharField(default="Africa/Libreville", max_length=50),
                ),
                (
                    "est_en_ligne",
                    models.BooleanField(
                        default=False, verbose_name="Événement en ligne"
                    ),
                ),
                (
                    "lieu",
                    models.CharField(blank=True, max_length=300, verbose_name="Lieu"),
                ),
                (
                    "adresse_complete",
                    models.TextField(blank=True, verbose_name="Adresse complète"),
                ),
                (
                    "coordonnees_gps",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Coordonnées GPS"
                    ),
                ),
                (
                    "lien_visioconference",
                    models.URLField(blank=True, verbose_name="Lien visioconférence"),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Nombre maximum de participants",
                    ),
                ),
                (
                    "inscription_requise",
                    models.BooleanField(
                        default=True, verbose_name="Inscription requise"
                    ),
                ),
                (
                    "inscription_ouverte",
                    models.BooleanField(
                        default=True, verbose_name="Inscription ouverte"
                    ),
                ),
                (
                    "date_limite_inscription",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date limite d'inscription"
                    ),
                ),
                (
                    "validation_requise",
                    models.BooleanField(
                        default=False, verbose_name="Validation requise"
                    ),
                ),
                (
                    "liste_attente_activee",
                    models.BooleanField(
                        default=True, verbose_name="Liste d'attente activée"
                    ),
                ),
                (
                    "formateur_nom",
                    models.CharField(max_length=200, verbose_name="Nom du formateur"),
                ),
                (
                    "formateur_bio",
                    models.TextField(
                        blank=True, verbose_name="Biographie du formateur"
                    ),
                ),
                (
                    "formateur_photo",
                    models.ImageField(
                        blank=True,
                        upload_to="formateurs/",
                        verbose_name="Photo du formateur",
                    ),
                ),
                (
                    "image_couverture",
                    models.ImageField(
                        blank=True,
                        upload_to="events/",
                        verbose_name="Image de couverture",
                    ),
                ),
                (
                    "programme_detaille",
                    models.TextField(blank=True, verbose_name="Programme détaillé"),
                ),
                (
                    "objectifs",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Objectifs"
                    ),
                ),
                ("prerequis", models.TextField(blank=True, verbose_name="Prérequis")),
                (
                    "materiel_requis",
                    models.TextField(blank=True, verbose_name="Matériel requis"),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("brouillon", "Brouillon"),
                            ("planifie", "Planifié"),
                            ("ouvert", "Ouvert aux inscriptions"),
                            ("en_cours", "En cours"),
                            ("termine", "Terminé"),
                            ("annule", "Annulé"),
                        ],
                        default="brouillon",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "est_publie",
                    models.BooleanField(default=False, verbose_name="Publié"),
                ),
                (
                    "est_featured",
                    models.BooleanField(default=False, verbose_name="Mis en avant"),
                ),
                (
                    "date_creation",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "date_modification",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de modification"
                    ),
                ),
                (
                    "notifications_activees",
                    models.BooleanField(
                        default=True, verbose_name="Notifications activées"
                    ),
                ),
                (
                    "rappels_automatiques",
                    models.JSONField(
                        blank=True,
                        default=events.models.default_rappels_automatiques,
                        verbose_name="Rappels automatiques (en heures)",
                    ),
                ),
                (
                    "cree_par",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="evenements_crees",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Événement",
                "verbose_name_plural": "Événements",
                "ordering": ["-date_debut"],
            },
        ),
        migrations.CreateModel(
            name="InscriptionEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_inscription",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date d'inscription"
                    ),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("en_attente", "En attente"),
                            ("en_attente_validation", "En attente de validation"),
                            ("confirmee", "Confirmée"),
                            ("en_attente_liste", "En liste d'attente"),
                            ("presente", "Présente"),
                            ("absente", "Absente"),
                            ("annulee", "Annulée"),
                            ("refusee", "Refusée"),
                        ],
                        default="en_attente",
                        max_length=25,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "date_validation",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de validation"
                    ),
                ),
                (
                    "commentaire_validation",
                    models.TextField(
                        blank=True, verbose_name="Commentaire de validation"
                    ),
                ),
                (
                    "besoins_specifiques",
                    models.TextField(blank=True, verbose_name="Besoins spécifiques"),
                ),
                (
                    "motivations",
                    models.TextField(blank=True, verbose_name="Motivations"),
                ),
                (
                    "date_arrivee",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Heure d'arrivée"
                    ),
                ),
                (
                    "date_depart",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Heure de départ"
                    ),
                ),
                (
                    "evaluation_event",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Évaluation (1-5)",
                    ),
                ),
                (
                    "commentaire_evaluation",
                    models.TextField(
                        blank=True, verbose_name="Commentaire d'évaluation"
                    ),
                ),
                (
                    "ip_inscription",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP d'inscription"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, verbose_name="User Agent")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inscriptions",
                        to="events.event",
                    ),
                ),
                (
                    "participante",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inscriptions_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "validee_par",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validations_events",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Validée par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inscription à un événement",
                "verbose_name_plural": "Inscriptions aux événements",
            },
        ),
        migrations.AddField(
            model_name="event",
            name="participants_confirmes",
            field=models.ManyToManyField(
                limit_choices_to={"inscriptions__statut": "confirmee"},
                related_name="events_confirmes",
                through="events.InscriptionEvent",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="RappelEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type_rappel",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("notification", "Notification in-app"),
                        ],
                        default="email",
                        max_length=20,
                    ),
                ),
                (
                    "heures_avant",
                    models.PositiveIntegerField(
                        verbose_name="Heures avant l'événement"
                    ),
                ),
                (
                    "date_programmee",
                    models.DateTimeField(verbose_name="Date programmée d'envoi"),
                ),
                ("objet_personnalise", models.CharField(blank=True, max_length=200)),
                ("message_personnalise", models.TextField(blank=True)),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("programme", "Programmé"),
                            ("envoye", "Envoyé"),
                            ("echec", "Échec"),
                            ("annule", "Annulé"),
                        ],
                        default="programme",
                        max_length=20,
                    ),
                ),
                ("date_envoi", models.DateTimeField(blank=True, null=True)),
                ("erreur_envoi", models.TextField(blank=True)),
                ("date_creation", models.DateTimeField(auto_now_add=True)),
                (
                    "destinataire",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rappels_recus",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rappels",
                        to="events.event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rappel d'événement",
                "verbose_name_plural": "Rappels d'événements",
                "ordering": ["date_programmee", "heures_avant"],
                "unique_together": {
                    ("event", "destinataire", "heures_avant", "type_rappel")
                },
            },
        ),
        migrations.AddIndex(
            model_name="inscriptionevent",
            index=models.Index(
                fields=["event", "statut"], name="events_insc_event_i_4f77b6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="inscriptionevent",
            index=models.Index(
                fields=["participante", "date_inscription"],
                name="events_insc_partici_977490_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="inscriptionevent",
            unique_together={("event", "participante")},
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["date_debut", "categorie"],
                name="events_even_date_de_094950_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["statut", "est_publie"], name="events_even_statut_e627ba_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(fields=["slug"], name="events_even_slug_30eb0f_idx"),
        ),
    ]
