# Generated by Django 4.2.7 on 2025-07-17 01:30

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Participante",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        error_messages={
                            "unique": "Un compte avec cette adresse email existe déjà."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "nip",
                    models.CharField(
                        db_index=True,
                        help_text="Numéro d'Identification Personnel",
                        max_length=20,
                        unique=True,
                        verbose_name="NIP",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=20,
                        verbose_name="téléphone",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, verbose_name="date de naissance"
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        choices=[
                            ("estuaire", "Estuaire"),
                            ("haut_ogooue", "Haut-Ogooué"),
                            ("moyen_ogooue", "Moyen-Ogooué"),
                            ("ngounie", "Ngounié"),
                            ("nyanga", "Nyanga"),
                            ("ogooue_ivindo", "Ogooué-Ivindo"),
                            ("ogooue_lolo", "Ogooué-Lolo"),
                            ("ogooue_maritime", "Ogooué-Maritime"),
                            ("woleu_ntem", "Woleu-Ntem"),
                        ],
                        db_index=True,
                        max_length=100,
                        verbose_name="région",
                    ),
                ),
                (
                    "ville",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, verbose_name="ville"
                    ),
                ),
                (
                    "experience",
                    models.CharField(
                        choices=[
                            ("aucune", "Aucune"),
                            ("locale", "Locale"),
                            ("regionale", "Régionale"),
                            ("nationale", "Nationale"),
                        ],
                        db_index=True,
                        default="aucune",
                        max_length=20,
                        verbose_name="expérience politique",
                    ),
                ),
                (
                    "document_justificatif",
                    models.FileField(
                        blank=True,
                        help_text="PDF, JPG ou PNG. Taille max: 5MB",
                        null=True,
                        upload_to=users.models.user_directory_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf", "jpg", "jpeg", "png"]
                            ),
                            django.core.validators.MaxValueValidator(5242880),
                        ],
                        verbose_name="document justificatif",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=users.models.user_directory_path,
                        verbose_name="photo de profil",
                    ),
                ),
                (
                    "statut_validation",
                    models.CharField(
                        choices=[
                            ("en_attente", "En attente"),
                            ("validee", "Validée"),
                            ("rejetee", "Rejetée"),
                        ],
                        db_index=True,
                        default="en_attente",
                        max_length=20,
                        verbose_name="statut de validation",
                    ),
                ),
                (
                    "motif_rejet",
                    models.TextField(
                        blank=True, null=True, verbose_name="motif de rejet"
                    ),
                ),
                (
                    "validated_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="date de validation",
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        verbose_name="dernière activité",
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True, verbose_name="notifications email"
                    ),
                ),
                (
                    "is_mentor",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="est mentor"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validated_users",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="validé par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Participante",
                "verbose_name_plural": "Participantes",
                "ordering": ["-date_joined"],
            },
        ),
        migrations.CreateModel(
            name="NipReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nip", models.CharField(db_index=True, max_length=20, unique=True)),
                ("nom", models.CharField(max_length=100)),
                ("prenom", models.CharField(max_length=100)),
                ("region", models.CharField(blank=True, max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("date_creation", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "NIP de référence",
                "verbose_name_plural": "NIP de référence",
                "ordering": ["nom", "prenom"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Décrivez votre parcours et vos motivations",
                        max_length=1000,
                        verbose_name="biographie",
                    ),
                ),
                (
                    "education_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("primaire", "Primaire"),
                            ("secondaire", "Secondaire"),
                            ("licence", "Licence"),
                            ("master", "Master"),
                            ("doctorat", "Doctorat"),
                        ],
                        max_length=50,
                        verbose_name="niveau d'éducation",
                    ),
                ),
                (
                    "skills",
                    models.JSONField(
                        blank=True, default=list, verbose_name="compétences"
                    ),
                ),
                (
                    "languages",
                    models.JSONField(
                        blank=True, default=list, verbose_name="langues parlées"
                    ),
                ),
                (
                    "political_interests",
                    models.JSONField(
                        blank=True, default=list, verbose_name="intérêts politiques"
                    ),
                ),
                (
                    "career_goals",
                    models.TextField(blank=True, verbose_name="objectifs de carrière"),
                ),
                (
                    "current_position",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="poste actuel"
                    ),
                ),
                (
                    "organization",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="organisation"
                    ),
                ),
                (
                    "mentorship_areas",
                    models.JSONField(
                        blank=True, default=list, verbose_name="domaines de mentorat"
                    ),
                ),
                ("website", models.URLField(blank=True, verbose_name="site web")),
                ("linkedin", models.URLField(blank=True, verbose_name="LinkedIn")),
                (
                    "twitter",
                    models.CharField(blank=True, max_length=50, verbose_name="Twitter"),
                ),
                (
                    "completion_percentage",
                    models.IntegerField(
                        db_index=True,
                        default=0,
                        verbose_name="pourcentage de complétion",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(default=True, verbose_name="profil public"),
                ),
                (
                    "show_contact_info",
                    models.BooleanField(
                        default=False,
                        verbose_name="afficher les informations de contact",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Profil utilisateur",
                "verbose_name_plural": "Profils utilisateurs",
            },
        ),
        migrations.AddIndex(
            model_name="participante",
            index=models.Index(
                fields=["region", "ville"], name="users_parti_region_99ee47_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="participante",
            index=models.Index(
                fields=["statut_validation", "validated_at"],
                name="users_parti_statut__a4f483_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="participante",
            index=models.Index(
                fields=["is_active", "last_activity"],
                name="users_parti_is_acti_cbad83_idx",
            ),
        ),
    ]
